datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String       @id @default(uuid())
  flows         Flow[]       @relation("FlowCreator")
  userOnFlows   UserOnFlow[] // Relations entre les utilisateurs et les flows
  userOnSteps   UserOnStep[]
  name          String?      @unique
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  StepOnFlow    StepOnFlow[]
}

model Flow {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  creatorId   String
  creator     User         @relation(name: "FlowCreator", fields: [creatorId], references: [id])
  title       String
  description String
  usersOnFlow UserOnFlow[]
  stepsOnFlow StepOnFlow[]
}

model UserOnFlow {
  id        String   @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  flowId    String
  flow      Flow     @relation(fields: [flowId], references: [id], onDelete: Cascade)

  status String @default("USER")

  @@id([userId, flowId])
}

model StepOnFlow {
  id          String   @id @default(uuid())
  title       String
  rank        String
  description String
  createdAt   DateTime @default(now())
  flowId      String
  flow        Flow     @relation(fields: [flowId], references: [id], onDelete: Cascade)
  creatorId   String
  creator     User     @relation(fields: [creatorId], references: [id]) // Relation vers User

  managers UserOnStep[] // Les managers de cette Ã©tape
}

model UserOnStep {
  userId String
  user   User       @relation(fields: [userId], references: [id])
  stepId String
  step   StepOnFlow @relation(fields: [stepId], references: [id], onDelete: Cascade)
  status String     @default("USER")

  @@id([userId, stepId])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
